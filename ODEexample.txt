namespace oc = ompl::control;

void TempestODE (const oc::ODESolver::StateType& q, const oc::Control* control, oc::ODESolver::StateType& qdot)
{
    //TempestODE - This function adapted for c++ from function provided by Professor Eric Frew. Adapted by Roland Ilyes

    //load in tempest aircraft parameters
	struct params ap;

    //cast control to the type we expect
    const double *u = control->as<oc::RealVectorControlSpace::ControlType>()->values;
    //notes: reference u[0] to u[3], elevator, aileron, rudder, throttle

    //Turn relevant states into vectors
    Eigen::Vector3d pos_inertial {q[0],q[1],q[2]};
    Eigen::Vector3d euler_angles {q[3],q[4],q[5]};
    Eigen::Vector3d vel_body {q[6],q[7],q[8]};
    Eigen::Vector3d omega_body {q[9],q[10],q[11]};

    //Kinematics
    Eigen::Vector3d vel_inertial = TransformFromBodyToInertial(vel_body, euler_angles);
    Eigen::Vector3d euler_rates = EulerRatesFromOmegaBody(omega_body, euler_angles);

    //Aerodynamic force and moment
    double density = Formulae::barometricDensity(-pos_inertial[2]);

    Eigen::Vector3d fa_body;
	Eigen::Vector3d ma_body;
	Eigen::Vector3d wind_angles;

	Eigen::Matrix<double, 12, 1> q_as_vec {q[0],q[1],q[2],q[3],q[4],q[5],q[6],q[7],q[8],q[9],q[10],q[11]};
	Eigen::Vector4d u_as_vec {u[0],u[1],u[2],u[3]};

    std::tie(fa_body,ma_body,wind_angles) = AeroForcesAndMoments_BodyState_WindCoeffs(q_as_vec, u_as_vec, wind_inertial, density);

    //Gravity
    Eigen::Vector3d fg_body;

    Eigen::Vector3d grav_vec {(-sin(euler_angles[1])),(sin(euler_angles[0])*cos(euler_angles[1])),(cos(euler_angles[0])*cos(euler_angles[1]))};

    fg_body = (ap.g*ap.m)*grav_vec;

    //Dynamics
    Eigen::Vector3d vel_body_dot;

    vel_body_dot = (-1*(omega_body.cross(vel_body))) + ((1/ap.m)*(fg_body+fa_body));

    Eigen::Matrix3d inertia_matrix {
    	{ap.Ix,0,ap.Ixz},
    	{0,ap.Iy,0},
    	{-ap.Ixz,0,ap.Iz}
    };

    Eigen::Vector3d omega_body_dot;

    omega_body_dot = inertia_matrix.inverse()*((-1*omega_body.cross(inertia_matrix*omega_body))+ma_body);

    //State Derivative
    qdot[0] = vel_inertial[0];
    qdot[1] = vel_inertial[1];
    qdot[2] = vel_inertial[2];
    qdot[3] = euler_rates[0];
    qdot[4] = euler_rates[1];
    qdot[5] = euler_rates[2];
    qdot[6] = vel_body_dot[0];
    qdot[7] = vel_body_dot[1];
    qdot[8] = vel_body_dot[2];
    qdot[9] = omega_body_dot[0];
    qdot[10] = omega_body_dot[1];
    qdot[11] = omega_body_dot[2];
}